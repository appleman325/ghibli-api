{"version":3,"sources":["Studio_Ghibli_logo.svg.png","logo.svg","Film.js","FilmComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","FilmColumn","props","cols","results","map","result","index","react_default","a","createElement","className","key","title","director","description","Film","this","Film_FilmColumn","Component","FilmComponent","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","error","isLoaded","data","_this2","fetch","then","res","json","setState","src_Film","App","src","Studio_Ghibli_logo","width","src_FilmComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gICAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6NCElCC,EAAa,SAAAC,GACjB,IAAMC,EAAOD,EAAME,QAAQC,IAAI,SAACC,EAAQC,GACtC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBC,IAAKL,GACtCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UAAKJ,EAAOO,OACZL,EAAAC,EAAAC,cAAA,sBAAcJ,EAAOQ,UACrBN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeL,EAAOS,iBAM3C,OAAOP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOR,IAehBa,mLAXJ,IACAZ,EAAWa,KAAKf,MAAhBE,QAEP,OACEI,EAAAC,EAAAC,cAACQ,EAAD,CACEd,QAASA,WANEe,aCqBJC,cAnCb,SAAAA,EAAYlB,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAL,KAAAG,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAL,KAAAK,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAT,KAAMf,KACDyB,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,KAAM,IALST,mFASC,IAAAU,EAAAd,KAClBe,MAAM,yCACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAAC3B,GACCyB,EAAKK,SAAS,CACZP,UAAU,EACVC,KAAMxB,KAGV,SAACsB,GACCG,EAAKK,SAAS,CACZP,UAAU,EACVD,6CAOR,OACEpB,EAAAC,EAAAC,cAAC2B,EAAD,CAAMjC,QAASa,KAAKU,MAAMG,cA/BJX,aCmBbmB,0LAdX,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAW4B,IAAKC,IAAoBC,MAAM,QACzDjC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACgC,EAAD,eATQvB,cCMEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.74512a06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Studio_Ghibli_logo.svg.2d0769cb.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nconst FilmColumn = props => {\r\n  const cols = props.results.map((result, index) => {\r\n    return(\r\n      <div className=\"col-md-4 film_box\" key={index}>\r\n        <div className=\"film_inner_box\">\r\n          <h4>{result.title}</h4>\r\n          <p>Director: {result.director}</p>\r\n          <p className=\"film_detail\">{result.description}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className=\"row\">{cols}</div>\r\n}\r\n\r\nclass Film extends Component {\r\n  render() {\r\n    const {results} = this.props;\r\n\r\n    return(\r\n      <FilmColumn\r\n        results={results}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Film;\r\n","import React, { Component } from 'react';\r\nimport Film from './Film';\r\n\r\nclass FilmComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      data: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://ghibliapi.herokuapp.com/films\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            data: result\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <Film results={this.state.data}/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilmComponent;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Studio_Ghibli_logo from './Studio_Ghibli_logo.svg.png';\nimport FilmComponent from './FilmComponent';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"text-center\">\n          <br />\n          <img className=\"logo-img\" src={Studio_Ghibli_logo} width=\"50%\" />\n          <br />\n          <br />\n          <FilmComponent />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}